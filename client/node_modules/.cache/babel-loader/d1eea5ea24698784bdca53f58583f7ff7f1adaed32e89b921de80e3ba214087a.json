{"ast":null,"code":"import api from './api.service.js';\n\n// Question Sets API endpoints\nconst QUESTION_SETS_PATH = '/questionSets';\n\n// Get all question sets (admin only)\nexport const getAllQuestionSets = async () => {\n  try {\n    const response = await api.get(QUESTION_SETS_PATH);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Get question set by ID (admin only)\nexport const getQuestionSetById = async questionSetId => {\n  try {\n    const response = await api.get(`${QUESTION_SETS_PATH}/${questionSetId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Create question set (admin only)\nexport const createQuestionSet = async questionSetData => {\n  try {\n    const response = await api.post(QUESTION_SETS_PATH, questionSetData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Update question set (admin only)\nexport const updateQuestionSet = async (questionSetId, questionSetData) => {\n  try {\n    const response = await api.put(`${QUESTION_SETS_PATH}/${questionSetId}`, questionSetData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Delete question set (admin only)\nexport const deleteQuestionSet = async questionSetId => {\n  try {\n    const response = await api.delete(`${QUESTION_SETS_PATH}/${questionSetId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["api","QUESTION_SETS_PATH","getAllQuestionSets","response","get","data","error","getQuestionSetById","questionSetId","createQuestionSet","questionSetData","post","updateQuestionSet","put","deleteQuestionSet","delete"],"sources":["/Users/mattgaudie/Documents/Projects/wizctf/client/src/services/questionSet.service.js"],"sourcesContent":["import api from './api.service.js';\n\n// Question Sets API endpoints\nconst QUESTION_SETS_PATH = '/questionSets';\n\n// Get all question sets (admin only)\nexport const getAllQuestionSets = async () => {\n  try {\n    const response = await api.get(QUESTION_SETS_PATH);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Get question set by ID (admin only)\nexport const getQuestionSetById = async (questionSetId) => {\n  try {\n    const response = await api.get(`${QUESTION_SETS_PATH}/${questionSetId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Create question set (admin only)\nexport const createQuestionSet = async (questionSetData) => {\n  try {\n    const response = await api.post(QUESTION_SETS_PATH, questionSetData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Update question set (admin only)\nexport const updateQuestionSet = async (questionSetId, questionSetData) => {\n  try {\n    const response = await api.put(`${QUESTION_SETS_PATH}/${questionSetId}`, questionSetData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Delete question set (admin only)\nexport const deleteQuestionSet = async (questionSetId) => {\n  try {\n    const response = await api.delete(`${QUESTION_SETS_PATH}/${questionSetId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,kBAAkB;;AAElC;AACA,MAAMC,kBAAkB,GAAG,eAAe;;AAE1C;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAACH,kBAAkB,CAAC;IAClD,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,aAAa,IAAK;EACzD,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,GAAGH,kBAAkB,IAAIO,aAAa,EAAE,CAAC;IACxE,OAAOL,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,iBAAiB,GAAG,MAAOC,eAAe,IAAK;EAC1D,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMH,GAAG,CAACW,IAAI,CAACV,kBAAkB,EAAES,eAAe,CAAC;IACpE,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,iBAAiB,GAAG,MAAAA,CAAOJ,aAAa,EAAEE,eAAe,KAAK;EACzE,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMH,GAAG,CAACa,GAAG,CAAC,GAAGZ,kBAAkB,IAAIO,aAAa,EAAE,EAAEE,eAAe,CAAC;IACzF,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,iBAAiB,GAAG,MAAON,aAAa,IAAK;EACxD,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMH,GAAG,CAACe,MAAM,CAAC,GAAGd,kBAAkB,IAAIO,aAAa,EAAE,CAAC;IAC3E,OAAOL,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}