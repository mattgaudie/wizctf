{"ast":null,"code":"import api from './api.service.js';\n\n// Events API endpoints\nconst EVENTS_PATH = '/events';\n\n// Get all events (admin only)\nexport const getAllEvents = async () => {\n  try {\n    const response = await api.get(EVENTS_PATH);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Get event by ID (admin only)\nexport const getEventById = async eventId => {\n  try {\n    const response = await api.get(`${EVENTS_PATH}/${eventId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Create event (admin only)\nexport const createEvent = async eventData => {\n  // Use FormData for multipart/form-data (file upload)\n  const formData = new FormData();\n\n  // Add event data\n  Object.keys(eventData).forEach(key => {\n    if (key === 'eventImage') {\n      if (eventData[key]) {\n        formData.append(key, eventData[key]);\n      }\n    } else if (key === 'eventDate') {\n      formData.append(key, new Date(eventData[key]).toISOString());\n    } else {\n      formData.append(key, eventData[key]);\n    }\n  });\n  try {\n    const response = await api.post(EVENTS_PATH, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Update event (admin only)\nexport const updateEvent = async (eventId, eventData) => {\n  // Use FormData for multipart/form-data (file upload)\n  const formData = new FormData();\n\n  // Add event data\n  Object.keys(eventData).forEach(key => {\n    if (key === 'eventImage') {\n      if (eventData[key] && typeof eventData[key] !== 'string') {\n        formData.append(key, eventData[key]);\n      }\n    } else if (key === 'eventDate' && eventData[key]) {\n      formData.append(key, new Date(eventData[key]).toISOString());\n    } else if (eventData[key] !== undefined) {\n      formData.append(key, eventData[key]);\n    }\n  });\n  try {\n    const response = await api.put(`${EVENTS_PATH}/${eventId}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Delete event (admin only)\nexport const deleteEvent = async eventId => {\n  try {\n    const response = await api.delete(`${EVENTS_PATH}/${eventId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Join event (users)\nexport const joinEvent = async eventCode => {\n  try {\n    const response = await api.post(`${EVENTS_PATH}/join`, {\n      eventCode\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Get event participants (admin only)\nexport const getEventParticipants = async eventId => {\n  try {\n    const response = await api.get(`${EVENTS_PATH}/${eventId}/participants`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["api","EVENTS_PATH","getAllEvents","response","get","data","error","getEventById","eventId","createEvent","eventData","formData","FormData","Object","keys","forEach","key","append","Date","toISOString","post","headers","updateEvent","undefined","put","deleteEvent","delete","joinEvent","eventCode","getEventParticipants"],"sources":["/Users/mattgaudie/Documents/Projects/wizctf/client/src/services/event.service.js"],"sourcesContent":["import api from './api.service.js';\n\n// Events API endpoints\nconst EVENTS_PATH = '/events';\n\n// Get all events (admin only)\nexport const getAllEvents = async () => {\n  try {\n    const response = await api.get(EVENTS_PATH);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Get event by ID (admin only)\nexport const getEventById = async (eventId) => {\n  try {\n    const response = await api.get(`${EVENTS_PATH}/${eventId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Create event (admin only)\nexport const createEvent = async (eventData) => {\n  // Use FormData for multipart/form-data (file upload)\n  const formData = new FormData();\n  \n  // Add event data\n  Object.keys(eventData).forEach(key => {\n    if (key === 'eventImage') {\n      if (eventData[key]) {\n        formData.append(key, eventData[key]);\n      }\n    } else if (key === 'eventDate') {\n      formData.append(key, new Date(eventData[key]).toISOString());\n    } else {\n      formData.append(key, eventData[key]);\n    }\n  });\n  \n  try {\n    const response = await api.post(EVENTS_PATH, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Update event (admin only)\nexport const updateEvent = async (eventId, eventData) => {\n  // Use FormData for multipart/form-data (file upload)\n  const formData = new FormData();\n  \n  // Add event data\n  Object.keys(eventData).forEach(key => {\n    if (key === 'eventImage') {\n      if (eventData[key] && typeof eventData[key] !== 'string') {\n        formData.append(key, eventData[key]);\n      }\n    } else if (key === 'eventDate' && eventData[key]) {\n      formData.append(key, new Date(eventData[key]).toISOString());\n    } else if (eventData[key] !== undefined) {\n      formData.append(key, eventData[key]);\n    }\n  });\n  \n  try {\n    const response = await api.put(`${EVENTS_PATH}/${eventId}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Delete event (admin only)\nexport const deleteEvent = async (eventId) => {\n  try {\n    const response = await api.delete(`${EVENTS_PATH}/${eventId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Join event (users)\nexport const joinEvent = async (eventCode) => {\n  try {\n    const response = await api.post(`${EVENTS_PATH}/join`, { eventCode });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Get event participants (admin only)\nexport const getEventParticipants = async (eventId) => {\n  try {\n    const response = await api.get(`${EVENTS_PATH}/${eventId}/participants`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}